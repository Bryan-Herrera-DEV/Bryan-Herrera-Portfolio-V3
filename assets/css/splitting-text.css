@charset "UTF-8";
/* Recommended styles for Splitting */
.splitting .word,
.splitting .char {
  display: inline-block;
}

/* Psuedo-element chars */
.splitting .char {
  position: relative;
}

/**
 * Populate the psuedo elements with the character to allow for expanded effects
 * Set to `display: none` by default; just add `display: block` when you want
 * to use the psuedo elements
 */
.splitting .char::before,
.splitting .char::after {
  content: attr(data-char);
  position: absolute;
  top: 0;
  left: 0;
  visibility: hidden;
  transition: inherit;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
}

/* Expanded CSS Variables */
.splitting {
  /* The center word index */
  --word-center: calc((var(--word-total) - 1) / 2);
  /* The center character index */
  --char-center: calc((var(--char-total) - 1) / 2);
  /* The center character index */
  --line-center: calc((var(--line-total) - 1) / 2);
}

.splitting .word {
  /* Pecent (0-1) of the word's position */
  --word-percent: calc(var(--word-index) / var(--word-total));
  /* Pecent (0-1) of the line's position */
  --line-percent: calc(var(--line-index) / var(--line-total));
}

.splitting .char {
  --char-percent: calc(var(--char-index) / var(--char-total));
  --char-offset: calc(var(--char-index) - var(--char-center));
  --distance: calc((var(--char-offset) * var(--char-offset)) / var(--char-center));
  --distance-sine: calc(var(--char-offset) / var(--char-center));
  --distance-percent: calc((var(--distance) / var(--char-center)));
  line-height: 1.3;
}

.splitting.splitting-vertical .char,
.splitting.splitting-horizontal .char {
  overflow: hidden;
  color: transparent;
}
.splitting.splitting-vertical .char::before, .splitting.splitting-vertical .char::after,
.splitting.splitting-horizontal .char::before,
.splitting.splitting-horizontal .char::after {
  visibility: visible;
  color: currentColor;
  transition: transform 0.5s cubic-bezier(0.9, 0, 0.2, 1);
  transition-delay: calc(0.2s + (0.02s * (var(--char-index))));
}
.splitting.splitting-vertical .char::before,
.splitting.splitting-horizontal .char::before {
  transition-delay: calc(0.02s * (var(--char-index)));
}

.splitting.splitting-vertical .char::before {
  transform: translateY(100%);
}

.splitting.splitting-horizontal .char::before {
  transform: translateX(110%);
}

.shift-right:before {
  content: "ï„µ";
  font-family: bootstrap-icons !important;
  font-style: normal;
  font-weight: normal !important;
  vertical-align: middle;
  display: inline-block;
  transform: scaleY(0) translateX(-1em);
  margin-right: -0.25em;
  font-size: 1.5rem;
}
.shift-right:before,
.shift-right .char {
  transition: transform 0.8s cubic-bezier(0.75, 0, 0.24, 0.98);
  transition-delay: calc(0.015s * var(--char-index));
}
.shift-right .char {
  transform: translateX(-0.15em);
}
.shift-right:hover:before {
  transform: scaleY(1) translateX(0em);
}
.shift-right:hover .char {
  transform: translateX(1em);
  transform: translateX(0.5em) translateX(calc(0.1em * var(--char-index)));
}

.spliflip-it .char,
.spliflip-3d .char {
  transition: transform 0.6s cubic-bezier(0.6, 0, 0, 0.6);
  transition-delay: calc(0.3s * (1 - var(--distance-percent)));
  transition-delay: calc(0.3s * var(--distance-percent));
}
.spliflip-it:hover .char,
.spliflip-3d:hover .char {
  transform: rotateX(-1turn);
  transition-duration: 1s;
  transition-delay: calc(0.3s * var(--distance-percent));
  transition-delay: calc(0.3s * (1 - var(--distance-percent)));
}

.spliflip-3d {
  perspective: 200px;
  transform-style: preserve-3d;
}

.text-white .splitting-vertical .char:before, .text-white .splitting-vertical .char:after,
.text-white .splitting-horizontal .char:before,
.text-white .splitting-horizontal .char:after,
.text-light .splitting-vertical .char:before,
.text-light .splitting-vertical .char:after,
.text-light .splitting-horizontal .char:before,
.text-light .splitting-horizontal .char:after {
  color: white;
}

.split-hover:hover .splitting-vertical .char::before,
.split-hover:hover .splitting-horizontal .char::before {
  transition-delay: calc(0.2s + (0.02s * (var(--char-index))));
}
.split-hover:hover .splitting-vertical .char::after,
.split-hover:hover .splitting-horizontal .char::after {
  transition-delay: calc(0.02s * (var(--char-index)));
}
.split-hover:hover .splitting-vertical .char {
  transform: translateY(0);
}
.split-hover:hover .splitting-vertical .char::before {
  transform: translateY(0%);
}
.split-hover:hover .splitting-vertical .char::after {
  transform: translateY(-100%);
}
.split-hover:hover .splitting-horizontal .char::before {
  transform: translateX(0%);
}
.split-hover:hover .splitting-horizontal .char::after {
  transform: translateX(-110%);
}
.split-hover:hover .splitting-vertical .char::before {
  transform: translateY(100%);
}
.split-hover:hover .splitting-vertical .char::before {
  transform: translateY(0%);
}
.split-hover:hover .splitting-vertical .char::after {
  transform: translateY(-100%);
}
.split-hover:hover.split-hover:hover .splitting-vertical .char,
.split-hover:hover.split-hover:hover .splitting-horizontal .char {
  opacity: 1;
}
.split-hover:hover.split-hover:hover .splitting-vertical .char::before,
.split-hover:hover.split-hover:hover .splitting-horizontal .char::before {
  transition-delay: calc(0.2s + (0.02s * (var(--char-index))));
}
.split-hover:hover.split-hover:hover .splitting-vertical .char::after,
.split-hover:hover.split-hover:hover .splitting-horizontal .char::after {
  transition-delay: calc(0.06s * (var(--char-index)));
}

.splitting {
  overflow: hidden;
}
.splitting .char {
  transition: transform 0.3s cubic-bezier(0.3, 0, 0.3, 1), opacity 0.3s linear;
  transition-delay: calc(30ms + (20ms * var(--char-index)));
}
.splitting[class^=splitting-]:not(.splitting-vertical):not(.splitting-horizontal):not(.splitting-shift-right):not(.spliflip-3d):not(.spliflip-it) .char, .splitting[class*=splitting-]:not(.splitting-vertical):not(.splitting-horizontal):not(.splitting-shift-right):not(.spliflip-3d):not(.spliflip-it) .char {
  transition-delay: calc(0ms + (0ms * var(--char-index)));
  opacity: 0;
}
.splitting.splitting-up .char {
  transform: translateY(100%);
}
.splitting.splitting-down .char {
  transform: translateY(-100%);
}
.splitting.splitting-left .char {
  transform: translateX(calc(-0.2em * var(--char-index)));
}
.splitting.splitting-right .char {
  transform: translateX(calc(0.2em * var(--char-index)));
}
.splitting.splitting-zoomIn .char {
  transform: scale3d(0.6, 0.8, 0.6);
}
.splitting.splitting-zoomOut .char {
  transform: scale3d(1.6, 1.3, 1.6);
}

.aos-init.aos-animate .splitting[class^=splitting-]:not(.splitting-vertical):not(.splitting-horizontal):not(.splitting-shift-right):not(.spliflip-3d):not(.spliflip-it) .char, .aos-init.aos-animate .splitting[class*=splitting-]:not(.splitting-vertical):not(.splitting-horizontal):not(.splitting-shift-right):not(.spliflip-3d):not(.spliflip-it) .char,
.card-split-hover:hover .splitting[class^=splitting-]:not(.splitting-vertical):not(.splitting-horizontal):not(.splitting-shift-right):not(.spliflip-3d):not(.spliflip-it) .char,
.card-split-hover:hover .splitting[class*=splitting-]:not(.splitting-vertical):not(.splitting-horizontal):not(.splitting-shift-right):not(.spliflip-3d):not(.spliflip-it) .char {
  transition-delay: calc(40ms + (20ms * var(--char-index)));
  opacity: 1;
  transform: none;
}

.splitting.cells img {
  width: 100%;
  display: block;
}

@supports (display: grid) {
  .splitting.cells {
    position: relative;
    overflow: hidden;
    background-size: cover;
    visibility: hidden;
  }

  .splitting .cell-grid {
    background: inherit;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: grid;
    grid-template: repeat(var(--row-total), 1fr)/repeat(var(--col-total), 1fr);
  }

  .splitting .cell {
    background: inherit;
    position: relative;
    overflow: hidden;
  }

  .splitting .cell-inner {
    background: inherit;
    position: absolute;
    visibility: visible;
    width: calc(100% * var(--col-total));
    height: calc(100% * var(--row-total));
    /* Position properly */
    left: calc(-100% * var(--col-index));
    top: calc(-100% * var(--row-index));
  }

  .splitting .cell {
    --center-x: calc((var(--col-total) - 1) / 2);
    --center-y: calc((var(--row-total) - 1) / 2);
    --offset-x: calc(var(--col-index) - var(--center-x));
    --offset-y: calc(var(--row-index) - var(--center-y));
    --distance-x: calc( (var(--offset-x) * var(--offset-x)) / var(--center-x) );
    --distance-y: calc( (var(--offset-y) * var(--offset-y)) / var(--center-y) );
  }
}
.splitting .cell,
.splitting .cell__inner,
.splitting img {
  transition: transform 1s cubic-bezier(0.63, 0.01, 0.07, 0.99), opacity 1s linear;
  /* No animation on leave */
  transition-delay: calc( 0.1s * var(--cell-index) );
  /* Reverse the animation */
  transition-delay: calc( 0.1s * (var(--cell-total) - var(--cell-index)) );
}
.splitting img {
  transform: scale(0.8);
  transition-delay: 0s;
  visibility: visible;
  opacity: 0;
}
.splitting:hover .cell,
.splitting:hover .cell__inner {
  transition-delay: calc( 0.1s * var(--cell-index) );
}
.splitting:hover img {
  opacity: 0.99;
  transform: scale(1);
  transition-delay: calc( 0.1s * var(--cell-total) );
}

.splitting-img.img-vertical:hover .cell {
  transform: translateY(100%);
}

.splitting-img.img-horizontal:hover .cell {
  transform: translateX(100%);
}
/*# sourceMappingURL=splitting-text.css.map */
